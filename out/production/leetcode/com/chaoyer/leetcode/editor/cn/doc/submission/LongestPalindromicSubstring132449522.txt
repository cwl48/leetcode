class Solution {
    public String longestPalindrome(String s) {
          
        int length = s.length();
            int start = 0, end = 0;
            for (int i = 0; i < length - 1; i++) {
                int len1 = calcuLongestLength(s, i, i);
                int len2 = calcuLongestLength(s,i,i+1);
                int max = Math.max(len1, len2);
               if (max > end + 1 - start) {
                    start = i - (max - 1) / 2;
                    end = i + max / 2;
                }
            }
            return s.substring(start,end+1);
        }

        public int calcuLongestLength(String s, int pre, int last) {

            int length = s.length();
            while (pre >= 0 && last <= length - 1) {
                char preChar = s.charAt(pre);
                char lastChar = s.charAt(last);
                if (preChar == lastChar) {
                    pre--;
                    last++;
                } else {
                    break;
                }
            }
            return last - pre-1;
        }
}
//runtime:28 ms
//memory:38.4 MB
